<?php

/**
 * Clean empty file directors for ProcessWire pages
 *
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 *
 */

class PageCleanEmptyDirs extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => __('Clean Empty Page File Dirs', __FILE__),
			'version' => 3,
			'author' => 'Ryan Cramer',
			'summary' => __("Goes through all of your /site/assets/files/ directories and removes those that have no files in them.", __FILE__),
			'singular' => true, 
			'autoload' => false, 
			);
	}

	/**
	 * Feel free to change the number below if you need to process more directories. 
	 *
	 * But depending on how high you make it, you may hit the PHP execution time limit.
	 *
	 */
	const maxDirs = 5000;

	public function init() { }

	protected function hasFiles($path) {
		$dir = opendir($path); 
		if(!$dir) return false;
		$has = false;
		while(!$has && ($f = readdir($dir)) !== false) $has = $f !== '..' && $f !== '.';
		closedir($dir); 
		return $has;
	}

	public function clean() {

		$path = wire('config')->paths->files; 	
		$results = array();
		$n = 0;

		foreach(new DirectoryIterator($path) as $file) {
			if(!$file->isDir() || $file->isDot()) continue; 
			$pageID = $file->getBasename();
			if(!ctype_digit("$pageID")) continue; 
			$pagePath = $path . $pageID . '/';
			if($this->hasFiles($pagePath)) continue; 
			$results[$pageID] = rmdir($pagePath);
			if(++$n >= self::maxDirs) {
				$this->error("Max directory limit of " . self::maxDirs . " reached. Run this module again to move on to the next 1000, or edit the module file and update the maxDirs constant at the top to a higher number."); 
				break;
			}
		}	

		return $results; 
	}

	/**
	 * Module configuration functions as a place to display our logged errors
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {

		$cleaner = wire('modules')->get('PageCleanEmptyDirs'); 

		if(wire('input')->post->_submit_clean) {

			$results = $cleaner->clean();
			$url = wire('config')->urls->files; 
			$numGood = 0;

			foreach($results as $pageID => $good) {
				if($good) {
					$numGood++;
				} else {
					$dir = $url . $pageID . '/';
					$cleaner->error("Error removing $dir"); 
				}
			}

			if(!count($results)) $cleaner->message("Looks like you are already clean!"); 
				else $cleaner->message("Successfully removed $numGood empty directories in $url"); 
		}
			
		$inputfields = new InputfieldWrapper();
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', '_submit_clean'); 
		$f->attr('value', '1'); 
		$f->attr('checked', false);
		$f->label = 'Clean empty directories now';
		$f->description = 'To clean empty directories in /site/assets/files/ check this box and submit. Pages with file/image fields require a directory, so you should expect that some of the removed directories will be re-created by these pages.';
		$f->notes = "Note that this module doesn't do anything other than what's on this screen (you may wish to uninstall it when done).";
		$inputfields->add($f); 

		return $inputfields; 
	}
}

